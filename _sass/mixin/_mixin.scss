//
// Mixins
// --------------------------------------------------


// Responsive image
// -------------------------

@mixin img-responsive($display: block) {
  display: $display;
  max-width: 100%;
  height: auto;
}

// Utilities
// -------------------------

@mixin clearfix() {
  &:before,
  &:after {
    content: " ";
    display: table;
  }
  &:after {
    clear: both;
  }
}

// WebKit-style focus
@mixin tab-focus() {
  // Default
  outline: thin dotted #333;
  // WebKit
  outline: 3px auto -webkit-focus-ring-color;
  // outline-offset: -2px;
}


@mixin make-row($gutter: $grid-gutter-width) {
  margin-left: ($gutter / - 2);
  margin-right: ($gutter / - 2);
  @include clearfix;
}


@mixin cacl-fixed-width($width, $type, $index) {
  #{$type}: $width / $index;
}

@mixin cacl-percentage($type, $index) {
  #{$type}: percentage($index / $grid-columns);
}

@mixin cacl-grid($index, $class, $type) {
  @if ($type == width) and ($index > 0) {
    .col-#{$class}-#{$index} {
      @include cacl-percentage(width, $index);
    }
  }

  @if ($type == push) {
    .col-#{$class}-push-#{$index} {
      @include cacl-percentage(left, $index);
    }
  }

  @if ($type == pull) {
    .col-#{$class}-pull-#{$index} {
      @include cacl-percentage(right, $index);
    }
  }

  @if ($type == offset) {
    .col-#{$class}-offset-#{$index} {
      @include cacl-percentage(margin-left, $index);
    }
  }
}

@mixin make-grid-columns() {
  $list: "";

  @each $name, $width in $media-list {
    @for $i from 1 through $grid-columns {
      $list: "#{$list} .col-#{$name}-#{$i},";
    }
  }

  #{$list} {
    position: relative;
    min-height: 1px;
    padding-left: $grid-gutter-width / 2;
    padding-right: $grid-gutter-width / 2;
  }
}

@mixin make-grid($class, $type) {
  @for $i from 1 through $grid-columns {
    @include cacl-grid($i, $class, $type);
  }
}

@mixin make-grid-column-float($class) {
  $list: "";
  @for $i from 1 to $grid-columns {
    $list: "#{$list} .col-#{$class}-#{$i},";
  }
  #{$list} {
    float: left;
  }
}

@mixin cal-container-with($type) {
  @if ($type == "$container-sm") {
    width: $container-sm;
  }
  @if ($type == "$container-md") {
    width: $container-md;
  }
  @if ($type == "$container-lg") {
    width: $container-lg;
  }
}

// Type
// -------------------------

@mixin text-overflow() {
  overflow: hidden;
  text-overflow: ellipsis;
  white-space: nowrap;
}

@mixin text-state($text-color) {
  color: $text-color;
  &:hover {
    color: darken($text-color, 10%);
  }
}

// Table
// -------------------------

@mixin table-row-variant($state, $background, $border) {
  .table {
    > thead,
    > tbody,
    > tfoot {
      > tr {
        > th.#{$state},
        > td.#{$state},
        &.#{$state} > th,
        &.#{$state} > td {
          background-color: $background;
        }
      }
    }
  }

  .table-hover > tbody > tr {
    > th.#{$state}:hover,
    > td.#{$state}:hover,
    &.#{$state}:hover > th,
    &.#{$state}:hover > td {
      background-color: darken($background, 5%);
    }
  }
}

// Form
// -------------------------

@mixin placeholder($color: $input-color-placeholder) {
  &:-moz-placeholder            { color: $color; } // Firefox 4-18
  &::-moz-placeholder           { color: $color; } // Firefox 19+
  &:-ms-input-placeholder       { color: $color; } // Internet Explorer 10+
  &::-webkit-input-placeholder  { color: $color; } // Safari and Chrome
}

@mixin form-control-focus($color: $input-border-focus) {
  $color-rgba: rgba(red($color), green($color), blue($color), .6);
  &:focus {
    border-color: $color;
    outline: 0;
    box-shadow: inset 0 1px 1px rgba(0,0,0,.075), 0 0 8px $color-rgba;
  }
}

@mixin form-control-validation($color, $color-bg) {
  .help-block,
  .control-label,
  .radio,
  .checkbox,
  .radio-inline,
  .checkbox-inline {
    color: $color;
  }

  .form-control {
    box-shadow: inset 0 1px 1px rgba(0,0,0,0.075); // redecre so transitions work
    border-color: $color;
    @include form-control-focus($color);
  }
}
